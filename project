#!/usr/bin/python3

from random import randint
from enum import Enum
import random
#class Player:
#  def __init__(self):
#    self.dice = []
#  def roll(self):
#    self.dice = [] # clears current dice
#    #for i in range(3):
#   self.dice.append(randint(1,6))
#  def get_dice(self):
#  return self.dice

#p1 = Player()


#p1.roll()

#print("Other player's original dice:")
#print(p1.get_dice())
#print(sum(p1.get_dice()))

player_name=input("What is your name?\n")

while True:
    player_class=input("Please select mage, warrior, or rogue...\n")
      if player_class == 'bard':
         print("No.")
         quit()

     elif player_class not in {'warrior','mage','rogue'}:
         print("Try again...")
         continue

     else:
         break
p_c = {

         'warrior' : {'hp': 100, 'strength': 100, 'dex' : 100, 'spells': False},
         'mage' : {'hp':50, 'strength': 20, 'dex': 100, 'spells':True},
         'rogue' : {'hp':75, 'strength': 50, 'dex': 150, 'spells':False},


 }

player = p_c[player_class]

print(player)
print(f"\n\nWelcome,",player_name,"the",player_class,"!")

 def showInstructions():

   print('''
 ---------------------------
 Commands:
   go [direction]
   get [item]
   look [object]
   quit''')

 def showStatus():

   print('---------------------------')
   print('You are in the ' + currentRoom)
   print('Inventory : ' + str(inventory))
   if "item" in rooms[currentRoom]:
     print('You see a ' +" ".join(rooms[currentRoom]['item']))
   if "container" in rooms[currentRoom]:
     print('You see a ' + rooms[currentRoom]['container'])
   if "directions" in rooms[currentRoom]:
     print('You can go ' + rooms[currentRoom]['directions'])
   if "flavor" in rooms[currentRoom]:
     print(rooms[currentRoom]['flavor'])
   print("-----------------------------\n")
  if "monster" in rooms[currentRoom]:
     print(f"There's a",rooms[currentRoom]['monster'],"in here!")
     print("------------FIGHT----------\n")

 inventory = []

 rooms = {

             'Entry Hall' : {
                   'south' : 'Training Room',
                   'east'  : 'Kitchen',
                   'item'  : 'key',
                   'directions' : 'south, east',
                   'flavor' : 'You stand in a well lit entry hall, with openings to the south and the east.\n There is thick, plus    h carpeting at your feet, and sconces that look to be solid gold hanging on the walls. \nYou here the sounds of laughter and swor    ds clashing to the south, and smell somethng tasty from the east'
                 },

             'Training Room' : {
                   'north' : 'Entry Hall',
                   'west'  : 'Dungeon',
                   'item'  : ['sword','dagger','spellbook'],
                   'directions' : 'north, west',
                   'flavor' : 'There\'s a dark room to the west with a sign above it. You should probably \<look\> at it. \nYou se    e a sword, a dagger and a strange glowing book on the table before you.',
                   'sign'  : 'In here is the dungeon, with a simple training dummy to fight against.'

             },
             'Dungeon' : {
                   'east' : 'Training Room',
                   'monster' : 'dummy',
                   'directions' : 'east'

             },

             'Kitchen' : {
                   'west' : 'Entry Hall',
                   'south': 'Courtyard',
                   'item' : 'potion',
                   'down' : 'Basement',
                   'directions' : 'west, south'
                },
             'Courtyard' : {
                   'north' : 'Kitchen',
                   'directions' : 'north'
                },
             'Basement' : {
                   'up' : 'Kitchen',
                   'container' : 'chest',
                   'directions' : 'up'
             }
          }

 currentRoom = 'Entry Hall'

 showInstructions()


 while True:

   showStatus()
   move = ''
   while move == '':
     move = input('>')

   move = move.lower().split(" ", 1)

   if move[0] == 'look':
     try:
       if move[1] == 'sign':
         print(rooms[currentRoom]['sign'])
       else:
         print("You don't see anything particularily exciting")
     except:
         print("You don't see anything particularily exciting")

   elif move[0] == 'go':

     if move[1] in rooms[currentRoom]:

       currentRoom = rooms[currentRoom][move[1]]

     else:
         print('You can\'t go that way!')

   elif move[0] == 'get' :

       if move[1] in rooms[currentRoom]['item']:
         if move[1] == 'sword' and player_class != 'warrior':
             print("Please, with those arms? Try something in your weight class.\n")

         elif move[1] == 'dagger' and player_class != 'rogue':
             print("You\'ll poke your eye out with that! Try something else.\n")

         elif move[1] == 'spellbook' and player_class != 'mage':
             print("You swing the book around before dropping it. You\'re more of a \'stab-em\' guy, really.\n")

         else:

             inventory += [move[1]]
             print(move[1] + ' got!')
             del rooms[currentRoom]['item']

       else:

         print('Can\'t get ' + move[1] + '!')


   if 'monster' in rooms[currentRoom]:
     print('~~~~Time to FIGHT~~~~')
 #from random import randint

     Weapon = Enum("Weapon", "sword, dagger, spellbook")

     class Player:
         def __init__(self, player_name):
             self.name = player_name
             self.health = 100
             self.weapon = None

         def damage(self):
             points = random.randint(10, 35)
             self.health -= points

         def select_weapon(self):
             weapons = [f"{weapon.value}-{weapon.name}" for weapon in Weapon]
             weapons = ", ".join(weapons[:-1]) + " or " + weapons[-1]
             choice = int(input(f"Choose your weapon {weapons}:  "))

     class dummy(Player):

         def select_weapon(self):
             self.weapon = "dagger"


     class Game:
         def __init__(self):
             self.game_over = False
             self.round = 0

         def new_round(self):
             self.round += 1
             print(f"\n***   Round: {self.round}   ***\n")

         def check_win(self, player, opponent):
             if player.health < 1 and opponent.health > 0:
                 self.game_over = True
                 print("You Lose. How?!?!?!")
             elif opponent.health < 1 and player.health > 0:
                 self.game_over = True
                 print("You killed a straw dummy. Yay!")
                 del rooms[currentRoom]['monster']
             elif player.health < 1 and dummy.health < 1:
                 self.game_over = True
                 print("Somehow, you tied.")

         def display_result(self, player, opponent):
             print(f"{player.name} used a {player.weapon.name}")
             print(f"{player.name} caused damage to {opponent.name}\n")

         def take_turn(self, player, opponent):
             opponent.damage()
             print("The dummy got thwacked!")


     current_game = Game()
     human = Player(player_name)
     dummy = dummy("Computer")

     players = [human, dummy]


     while not current_game.game_over:
         for player in players:
             player.select_weapon()
         current_game.new_round()
         current_game.take_turn(human, dummy)
         current_game.take_turn(dummy, human)
         print(f"The dummy is at {dummy.health}")
         current_game.check_win(human, dummy)


   elif move[0] == 'quit':
       print("Thanks for playing!")
       break
